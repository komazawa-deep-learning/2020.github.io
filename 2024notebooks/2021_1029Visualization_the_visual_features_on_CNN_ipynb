{
  "nbformat": 4,
  "nbformat_minor": 5,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.12"
    },
    "colab": {
      "name": "2021_1029Visualization_the_visual_features_on_CNN.ipynb.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/komazawa-deep-learning/komazawa-deep-learning.github.io/blob/master/2024notebooks/2021_1029Visualization_the_visual_features_on_CNN_ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2e51ab6e-398a-43d9-860e-2e86977a10e5"
      },
      "source": [
        "* data: 2021_1029\n",
        "* filename: `2021_1029Visualization_the_visual_features_on_CNN.ipynb`\n",
        "* author: 浅川伸一\n",
        "* lincense: MIT"
      ],
      "id": "2e51ab6e-398a-43d9-860e-2e86977a10e5"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e6c2107c-9d69-4a51-a1bd-bf703341aba0"
      },
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "import os\n",
        "import sys\n",
        "\n",
        "try:\n",
        "    import japanize_matplotlib\n",
        "except ImportError:\n",
        "    !pip install japanize_matplotlib\n",
        "    import japanize_matplotlib"
      ],
      "id": "e6c2107c-9d69-4a51-a1bd-bf703341aba0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8422dbd5-964c-4b3e-aac3-2cfd28d2c8b3"
      },
      "source": [
        "#!pip install japanize_matplotlib\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "#import japanize_matplotlib\n",
        "#%config InlineBackend.figure_format = 'retina'\n",
        "#%matplotlib inline\n",
        "\n",
        "# ResNet18 という学習済みのモデルを読み込みます。\n",
        "from torchvision import models\n",
        "resnet = models.resnet18(weights='DEFAULT')\n",
        "\n",
        "# ResNet18 がどのような深層畳み込みニューラルネットワークで構成されているかを調べてみます\n",
        "# named_modules を印字して調べます\n",
        "#print(resnet.named_modules)\n",
        "resnet"
      ],
      "id": "8422dbd5-964c-4b3e-aac3-2cfd28d2c8b3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0ca0b2da-50fe-41cb-a6a6-2c779a4a3f55"
      },
      "source": [
        "上の結果の 第 1 行目は，次のように表示されます\n",
        "\n",
        "* (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
        "\n",
        "これは conv1 という名前の層で，\n",
        "\n",
        "* 入力特徴数: 3 すなわち，入力データはカラー画像なので，赤，緑，青の光の 3 原色のそれぞれを表した数値となっています\n",
        "* 出力特徴数: 64\n",
        "* カーネルサイズ: (7, 7) 7 画素 X 7 画素のカーネル幅を持つ畳み込み演算が行われることを示しています\n",
        "* ストライド: (2, 2) 縦と横とも 2 画素おきにずらしてカーネルが移動することを意味しています。\n",
        "* パディング: (3, 3) 上下左右に入力画像の周辺に 3 画素分だけ架空の入力領域を確保していることを表します"
      ],
      "id": "0ca0b2da-50fe-41cb-a6a6-2c779a4a3f55"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "08584ac7-d89a-4213-ad86-0cae4297555a"
      },
      "source": [
        "# 次に ResNet18 の第一層，すなわち，最も入力に近い層のサイズを調べます。\n",
        "print(resnet.conv1.weight.size())\n",
        "plt.figure(figsize=(2,2))\n",
        "plt.axis('off')\n",
        "plt.imshow(resnet.conv1.weight.detach().numpy()[0].transpose(1,2,0).clip(0,1), cmap='gray')"
      ],
      "id": "08584ac7-d89a-4213-ad86-0cae4297555a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "20c0c195-9e4d-4dca-b80b-9e3f9826772a"
      },
      "source": [
        "# 上記の結果は，torch.Size([64, 3, 7, 7]) と表示されているはずです。\n",
        "# これは，4 次元のデータで，以下のような意味になります。\n",
        "# 64: 出力特徴数，\n",
        "# 3: 入力特徴数\n",
        "\n",
        "import torchvision\n",
        "\n",
        "def img_show(inp, title=None, figsize=(10,10), fontsize=24, **kwargs):\n",
        "    \"\"\"テンソルを画像として表示\"\"\"\n",
        "    inp = inp.numpy().transpose((1, 2, 0))\n",
        "    #inp = inp.numpy().transpose((1, 2, 0))\n",
        "    #mean = np.array([0.485, 0.456, 0.406])\n",
        "    #std = np.array([0.229, 0.224, 0.225])\n",
        "    #inp = std * inp + mean\n",
        "    inp = np.clip(inp, 0, 1)\n",
        "    plt.figure(figsize=figsize)\n",
        "    plt.axis('off')\n",
        "    plt.imshow(inp)\n",
        "    #plt.imshow(inp)\n",
        "    if title is not None:\n",
        "        plt.title(title, fontsize=fontsize)\n",
        "\n",
        "# ResNet18\n",
        "data = resnet.conv1.weight.detach()\n",
        "#data = resnet.conv1.weight\n",
        "out = torchvision.utils.make_grid(data)\n",
        "#out = torchvision.utils.make_grid(data)\n",
        "img_show(out, figsize=(4,4), title=\"ResNet18 の最下位層の特徴検出器\", fontsize=12)\n",
        "plt.show()"
      ],
      "id": "20c0c195-9e4d-4dca-b80b-9e3f9826772a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d6ae41d9-23d0-4762-9bff-81da0b352e84"
      },
      "source": [
        "# AlexNet\n",
        "alexnet = models.alexnet(weights='DEFAULT')\n",
        "#print(alexnet.named_modules)\n",
        "data = alexnet.features[0].weight.detach()\n",
        "out = torchvision.utils.make_grid(data)\n",
        "img_show(out, figsize=(4,4), title=\"AlexNet の最下位層の特徴検出器\", fontsize=12)\n",
        "#img_show(out, figsize=(10,10), title=\"AlexNet の最下位層の特徴検出器\")\n",
        "plt.show()"
      ],
      "id": "d6ae41d9-23d0-4762-9bff-81da0b352e84",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "11f35cbc-293e-4696-878a-dcae8bee2067"
      },
      "source": [
        "# Inception_v3\n",
        "net = models.inception_v3(weights='DEFAULT')\n",
        "data = net.Conv2d_1a_3x3.conv.weight.detach()\n",
        "out = torchvision.utils.make_grid(data)\n",
        "img_show(out, figsize=(4,10), title=\"inception_v3 の最下位層の特徴検出器\", fontsize=12)\n",
        "#img_show(out, figsize=(10,10), title=\"inception_v3 の最下位層の特徴検出器\")\n",
        "plt.show()"
      ],
      "id": "11f35cbc-293e-4696-878a-dcae8bee2067",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bd43c9a3-3091-4615-9b2f-1837e32c73e1"
      },
      "source": [
        "# VGG11\n",
        "net = models.vgg11(weights='DEFAULT')\n",
        "data = net.features[0].weight.detach()\n",
        "out = torchvision.utils.make_grid(data)\n",
        "img_show(out, figsize=(4,4), title=\"VGG11 の最下位層の特徴検出器\", fontsize=12)\n",
        "#img_show(out, figsize=(10,10), title=\"VGG11 の最下位層の特徴検出器\")\n",
        "plt.show()"
      ],
      "id": "bd43c9a3-3091-4615-9b2f-1837e32c73e1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "99e6affc-766f-4787-9bfd-07af2edbd44d",
        "outputId": "a86b83ac-3a78-4a6c-cd1d-8ead06c81fa6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 613
        }
      },
      "source": [
        "# densenet121\n",
        "net = models.densenet121(pretrained=True)\n",
        "data = net.features.conv0.weight.detach()\n",
        "out = torchvision.utils.make_grid(data)\n",
        "img_show(out, figsize=(6,6), title=\"densnett121 の最下位層の特徴検出器\", fontsize=12)\n",
        "#img_show(out, figsize=(10,10), title=\"densnett121 の最下位層の特徴検出器\")\n",
        "plt.show()"
      ],
      "id": "99e6affc-766f-4787-9bfd-07af2edbd44d",
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.\n",
            "  warnings.warn(msg)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAeEAAAH3CAYAAACMxeeIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABRnklEQVR4nO3dd5xeVbX4//W06TW9kkACJCRcQJCOoQpCEBEEVKRG9ApeREWBiyBw+SJVFPkJghBEShDvpSk1FAMYqgGCoSQkIW1KJtNnnr5/f8TMZZi1DnMensnO1c/79cqLV9Yp+/T1nLD2PhHnnBMAALDZRX1vAAAA/6pIwgAAeEISBgDAE5IwAACekIQBAPCEJAwAgCckYQAAPCEJA/g/K5PJyCOPPCLZbHbAtJdfflmWL18ean2pVEqef/75frHe3t7AZRoaGuTll19Wp7W0tEhra2uobcC/FpIwsJn96le/kt122+0T/zz44INDuh1/+tOfZOHChf1i7e3tsmjRoiFtt5ja29vlyCOPlK6urgHTLrrook88hslkUg455BBZtmyZiIg0NzfL7Nmz+81z7LHHyi233GKu49lnn5Uf/ehHA+LpdFpmzpwpO+64o7p9Qf7+97/LCSecMOj5c7mcZLPZfn9ERJxzA+K5XC7UtmBokYS3cKeccorsv//+vjfDm66uLvnd734nu+yyi0yePHmLXGd3d7esWbNGenp6BjX/6tWrZdy4cfL73//e/JPNZqW5uXnAsnV1dRKJREL/0fzkJz+RV199tV9swYIFg7re9t13XykrK5OqqqpP/FNeXi7Tpk0b1LHp7e2VtWvXSmdnZ+B8mUxGrrrqKunu7h7Uei0XXnihOOekrKxMtt9++754KpWSMWPGiIjIsmXLBr39HzV37lwpKyuTyZMnywUXXBBq2aamJpk3b96g558yZYokEol+fxYvXix/+tOfBsRnzJgRdlcwhOK+NwD/Wh544AHZb7/9ZPjw4X2xZDIp999/v5x44on95j3vvPPkF7/4hYiIVFRUSHV1tbne5uZmueyyy+Thhx+WtWvXyrhx4+Skk06SCy+8UBKJREHrDLJy5Uq56qqr5OGHH5ZVq1b1JbqZM2fKN7/5Tfn3f/93icft2+vpp5+Www47zJy+bt06Nf7KK6+obzLTp0+XX//614P+wdbQ0CCLFi2SQw45ZFDza2666SY55ZRTPnG+xx57TL73ve+Z05ubm+W6666TP/7xj/L+++9LJBIR55xMmTJFTj75ZPnBD34gFRUV/ZZZsWKF/PjHP5avfvWr/eLz5s3rS+CrV6+WhQsXyq233to3/YQTTpCqqioREbn11lvld7/7nbzyyivinJP29va++Zxz0tbWJul0Wj744ANpbW3t+2fqUaNGyXbbbRe4z42NjXL++efLT37yEznooINk1113lT333FO+9rWvqcfnxBNPlPXr1weus6GhQcaOHSvLly9Xfzy+8sorsttuu4mI9P2AEBHZY489+v7F4/nnn5c5c+YEtoPNiySMzeYvf/mLHH300bJ8+fJ+Sfiqq66S2267bUAS3nPPPWWvvfaSQw45RL7zne/Is88+q663s7NTDjroIMnlcnLNNdfI5MmTZcGCBXLhhRdKQ0OD3HzzzaHXGeSuu+6SOXPmyOzZs+X222+XuXPnSiqVkl/96lfyyCOPyE9/+lO577775KGHHpL6+np1HV/60pfk97//vdnGnnvuqca33XZbc5kJEyYM+o3tzjvvlBkzZsikSZOkoaGhL97W1ibOuX4xEZHa2lopLy/vFzv77LPlvPPOE5GNb241NTVSVlbWN729vV0ikYjU1NSY2/3UU0/JcccdJ7vssotce+218uKLL8r8+fPl8ccflyeffFIuvfRSueeee+Sxxx6Trbbaqm+5ZcuWyfDhw/v+f+2GDRtEROS2226TNWvWiMjGH0otLS2yePHivuUOP/xwqaqqkldffVV+9KMfyfz58+X1118336iXLFkiiURCLrjgAlm/fr2k02n51re+JVdccYW0t7dLb2+vtLe3SzqdloaGBqmsrJREIiHHH3+81NfXy7e//W0pKyuTa6+9Vk499VQpLy+Xo48+Ovjk4F+Lwxbt5JNPdrNmzfK9GUXxzDPPOBFxy5cv7xe/+OKL3aRJkwKXPfnkk815fvazn7mamhq3du3afvGrrrrKiYhramoKvU7Lfffd50pLS90f/vCHvtgBBxzgzj333L6/t7S0uBkzZrjDDz9cXccFF1zgSkpKXGVlpfknkUi43/72t4PeLhFxDz300KDmzefzbtq0ae7SSy9199xzjxORT/xzyy239FvHPvvs426//Xb3yiuvuAULFrgvfOEL7ogjjnALFixwCxYscM8++6wbPXq0u+aaa9yCBQvcokWLBmzH888/78rKytwvfvGLvtipp57qvvKVr/T9vaenxx144IFu5513dul0ui9+/fXXD9jGnXbaqd/6Dz30UPfzn//cPAZLlixx2WzWTZ061f3yl790IuJKS0v7/ltaWupuuukm9/Wvf90559xFF13kzj777L51nHzyyQO24cQTT3SHHXaYExF31FFHuSuuuKLvz/Tp010ikXBXXnmly+fzfet59NFH3fDhw/tt36Z75aPWrVun3j/OOTdp0qQB2zJ//nz38MMPD4hvv/326jGBH/w/4S3I3XffLTvssIOUlpbKzJkz5d5771Xna2pqkpNPPlmGDx8udXV1cvDBB8tLL73Ub579999fTjzxRHnuuedkzz33lIqKCpk2bZr84Q9/6DffokWLZL/99pPKykqZMGGCnHfeeZJMJvumRyIRufXWW+Wmm26SbbfdViorK2WfffaRN998s996stms/PSnP5VJkyZJRUWF7LLLLv3e9ObOnSsHHHCAiIhsvfXWEolEZO7cuXLKKafIJZdcIitXruz7/5crVqwIddwOPvhgufnmm2Xs2LH94pveCleuXBlqfZbm5maZM2eO3HDDDXLsscf2xd9++22ZPn1639+HDRsmt956q/z5z3+WF198ccB6Lr/8ckmlUtLV1WX+SafTctppp4XavtNPP12uv/56SaVSgfPNmzdP3nnnHamvr5cTTjhBnHPqn8bGRunt7RXnnPlPmMcee6z8+c9/li9+8Ysye/Zsee655+Swww6TJUuWyE9/+lOprKyU++67T04//fR+y6VSKTnxxBPl+9//vvzHf/xHX3zx4sX9jmV5ebnccccd8tZbb/W7dp9++mn5yU9+0vf/zVtbW+Xll1/udwxzuZyk0+kBx1Zk43U9bdo0+e1vfysiImeeeaY45ySZTPb9N5lMyrPPPtv3vwZaWlr6/cvG3LlzxTknxx9/vMyaNUucc9LT0yMjRoyQRYsWyZw5c2TVqlXyyCOPyMyZM+Wee+6RF154Qf72t78V7ZrcZMWKFf3O3R/+8Ac54YQT5NBDDx1wXt95552ito1PaXNnfejuvPNOJyJuzpw57q9//at76KGH3K677upGjx7d7024o6PDbb/99u6AAw5wTzzxhFu4cKE744wzXCKRcC+++GLffLNmzXLTp093W2+9tbvnnnvcSy+95GbPnu0SiYRbsWKFc27j28DEiRPdcccd51577TX3wAMPuG222cbNmzevbz3yjzeMvfbayz311FNu/vz5burUqW7atGkul8v1zffVr37Vbb311u7uu+92r776qrv22mtdaWmpu/rqq51zzrW1tbk77rjDiYh76qmn3JIlS1xbW5tbu3atO/PMM924cePckiVL3JIlS/q98WxSyFvrscce66qrq11HR4c6Pew6L7nkEjdjxox+bzErV650IuLeeOONAfOPHz/eXXTRRX1/nzJliovFYqH/HHjggZ+4bSLivvOd77iJEye6rbbayt1zzz3qfMlk0m233XZORNwNN9zgnHNu8eLFbvLkya61tbXfvKeddpo74ogj1PXss88+bu7cuW7SpEluypQpbsaMGW7GjBluu+22c7FYrO/vM2bMcJMmTXK77rprv+XvuOMON2zYMNfb29sXS6VSrrS01D344IMD2tt7773dSSed5JxzLpPJuJqaGvfSSy+55uZmJyKutbXV/fjHPx7UW/0mjY2NbuTIke7iiy9W9zGVSrna2lpXV1fnnHPuqKOOcr/5zW/6zdPV1eWqqqpcWVmZe+yxx5xzzh1xxBGutrbW1dbWuvLycpdIJPr+XltbO6CdRx991EUiETd69Oi+P/X19U5E+sVGjhw54E04m8261tbWAX/22Wcfd+aZZ6rTNv3JZDLqfmPzIglvAfL5vBs/frw74IAD+sU7Ozvd5MmT+yXhyy67zG2zzTYulUr1m/cLX/iC+8IXvtD391mzZjkRcQsXLuyLLV261ImIu/XWW51zru8Bdv/99/fN09PT02+9IuLGjBnj2tra+mK33nqrExG3dOlS55xzCxYscJFIxL377rv9lr3yyitdTU1NX1Idqn+O/rienh536qmnukgkMuCfUQtdp3PO7bvvvu6CCy7oF7v55pvdiBEj+v0g2eSzn/2sO+OMM/rFHn74YbfPPvv0/f322293hx56qNuwYYNrbm4e8Ef7QaIREffwww+7rq4u98Mf/tDFYjF3+OGHuw8//LDffBdccIHbcccd3Z577tmXhJPJpKusrHRz587tN+/OO+/sLrvsMrW9vfbay915551u0qRJ7pVXXumLL1++fMA/rT766KMDkvCJJ57ovva1r/WLPf744y4Wi7kNGzYMaO8rX/mK+/znP9/39zvvvNPl8/l+SVhbzjnnjj/++AGJNpfLucMPP9yJiLviiivcrFmz+n70iIiLxWIuGo26gw8+2I0dO9a9/vrrbvr06e7JJ5/st5677rrL7b333m7SpEmuvr7e/eUvf3GzZs3q+98Vt9xyizv++OOdc/97v33co48+6mpra90rr7zS9+emm25yItIv9thjjw24f/72t78N6oeH9ueZZ55Rjxc2LwqztgDvvvuurFmzRi655JJ+8aqqKtlvv/3kww8/7Is99thjsnz58gHVovl8XkaPHt0vtttuu8kee+zR9/ett95aRP638nbEiBFy4IEHyplnniltbW1y/PHH91WOftSJJ54otbW16nqmTJkijz32mDjnZIcddui3nHNO8vm8fPDBB/26fwylt99+W44//nhZt26d/Pd//7d86UtfKtq6165d2684SETkj3/8oxx++OESjQ78PzsbNmxQq69ff/31vn8qb29vl5122kmOPfZYWbBggYwaNaqvuKmpqUmOOeYYuf322we9jZWVlXL11VfL0UcfLV//+tdlhx12kJdffrnvn3hTqZTcfffdctZZZ/UtU1paKgcffLA88sgjcvLJJ4vIxj6ub7/9tlx77bVqO+l0WkpLS0VE5Otf/3pf0VY6nZa2tjbZeeed++bt7OwcUKC2du1a2X333fvF/vjHP8o+++yjFrNt2LBB6urq+v7+8SK+r33ta9LT0yOPPPLIgGWz2WzfP0vH43EpKyuTO+64QxobG/uqwzcV6C1atEhmz54tq1evloaGBmlvb5crr7xSbrvtNnn//fdll1126bfen/3sZ3LKKafIQw89JF/60pfkf/7nf9TjFeTAAw+U9957T0aNGtUX2/TP5puqnUU23uPr1q2TkSNH9sV23nlncc71/f3GG2+Ua665Rh5++GGZOXOmiIi8//77cuyxx8rnPvc5ufzyy6Wmpib0NmLokIS3AC0tLSIiMn78+AHTPv5wb2xslAMPPFCuv/76AfPGYrF+f6+srFTX9dHRhR555BG56qqr5MILL5RzzjlHzjnnHLnooov6reuT1tPY2Cg1NTXywgsvqPs3adIkNV5s9913n5x66qly+OGHy/z58wf8KPm0qqqq+vXdXbZsmTz55JPy9NNPD5j3gw8+kGXLlslnPvOZAdM+85nP9HV3mTt3rtx7770yf/58OeeccyQej8vVV18t6XRatt1224Iraffee29ZtGiRPPjgg/3+H+s111yjzn/QQQfJpZdeKs45iUQi8uabb4pzrt+PuI/q6uqS2tpamT9/vmQymU/cno9XVn/8WHZ0dMjdd98tN9xww4BlOzs7ZeHChf362nZ0dMh9990nN910k4hsrCY/55xzArucXXHFFXLEEUfII488IieeeKJ89atflW9/+9sisjEJz549W/L5vCSTyb4fwI8++qiccsopcvDBB8t2223Xr6r/xhtvlFGjRsm4ceNEROSss86Szs5OOfroo+W0006Tb3/725JKpSSdTsuIESP6JcuPGjVqlDzwwAP9krAmGo3KAw88ILfeeuuA/t1vvPGGnHvuuVJTUyMvvfRSv3Vtu+22snDhQvnZz34mM2fOlDlz5sjpp5+uPm+w+ZGEtwCbbuxVq1YNmPbxIfOGDx8ujY2Nfb9yP63y8nK5+OKL5T//8z/ltttuk7POOkuqqqrk3HPPHfQ6hg8fLh0dHTJ27Nh+D6nN6e6775bTTjtNbrjhBvnmN785JG3su+++8uSTT8qFF14oIiIXX3yx7LzzzgP65jrn5JxzzpHhw4fLUUcdNWA9r776al8/z66urr63nR//+Mey0047yXHHHSdPPvmkjB07Vo488siCt7e2tlZOOumkQc372c9+VtavXy9LliyRHXbYQR5//HHZd999B/wA22TdunUyduxYGTNmjAwfPlzGjRun/mtALpeT5ubmASNG7bvvvnLzzTdLJpORRCIhV111ldTU1Mjxxx8/YB3nn3++pNNp+cY3vtEXO+qoo6S9vV1mz54tr732mlxwwQUSj8dl+fLlcumll8ovf/nLvn/VmTNnjtTV1fX7AbJp4IpN9t9/f+nq6ur3JrzJ5z73OZk+fbrsvffe/bbrt7/9rfzyl7/s684Vj8elvr5edt11V7nssstkv/32k5NOOqmvi9W0adP6/QtEMbz11lty9tlny7PPPttX2PjAAw9IPp+X3/3udzJhwgQ54IAD+n5UO+fkuuuuk//6r/+S3/3ud6FG5cLQoDp6C7D99tvLxIkTZe7cuf3iy5YtG/DPa4ceeqgsXrxYnnjiiX7x+fPny09/+tPQbW96C4/H43LGGWfI7Nmz5S9/+UuodRx66KEiIgP+6bKxsVG+8Y1v9P2Q2PSQzufz/eaLRqMDYmEsXrxY5syZI7/5zW+GLAGLiHz3u9+VhQsXys9//nO5/vrr5Z577pHrrruu3zxr1qyRL3/5y/LII4/Ib37zGzWJ7bbbbrJixQpZsWJFv8QwZswYuemmm+SLX/yiXHnllXL77bebo10V28477yyJRELefvttERF59NFHzR8Ay5cvl+7ubpkyZYo45ySVSsnLL78sS5cuHfDnmWee6Vdtv8mpp54qGzZskPPPP1/uuusuueqqq+SKK67o98bc2toq3/rWt+TGG2+Uq666SiZOnNg37U9/+pO8/vrrAyrIJ06cKK2trTJ79uxBvaFrMpmM3H333XLqqafKnXfeKa+++qq89957ctddd8kHH3zQN9/cuXPVwVGuvfZa2W+//WT16tXy9NNPyxVXXCFz5syRfD4/4B7/tLbbbjs566yz5Jvf/KZccsklfUNTfv7zn++bZ/vtt++L/+IXv5DDDjtMli9f3q/CH/7wJrwFiEQicvXVV8sJJ5wg3/jGN+Q73/mONDQ0yLnnnjvg/7N+//vfl3vvvVeOOeYYueKKK2SvvfaS1157Tc4991z5yU9+EqrdxYsXy5577innnnuuHHnkkdLU1CQvvPCCfPe73w21ngMOOECOO+44+dnPfiapVEqOPfZYaWpqkvPPP1+22Wabvgfrpn+2u//++2W77baTf/u3f5NtttlGxo0bJ2vXrpUnnnhCVq1aJSeffHLgaFMf96Mf/Uh22mkn2X333dXuFyNGjJARI0aE2ifNtGnT5NZbb5XTTz9dnHPyy1/+Uvbff39pamqS+++/X5566in585//LPX19fLAAw8MSGIvvfSSLFiwQFavXi0/+MEPZNWqVfLGG2/0/T92EZGysjLp7OyUaDQqzz//vEybNm2zJOKysjL58MMPZcyYMdLW1iYLFy6U2267TZ33lVdekT322EMqKir63nD32muvAf87RETMRDhixAi577775Mtf/rJ0dnbKeeedJyeddJJ0dXXJvffeK88995w8+OCDEo1G5ZZbbhnQRerjNRGbxGIxueOOO+TQQw+V5cuXf+LIVpvccsst8sQTT8jLL78sLS0t8qtf/Uq++MUvyu677y7HHXecXHTRRfLOO+/I8ccfL88++6xUVlaq/6thk/Xr18sxxxwj3/rWt+Scc86RJ554Qg4++GCZN29ev/O9yaaxnz/6dxEZ8GGKj/9YLS0tlS9/+cvq/xIJwj9Fb0F8VYRhoHnz5rnp06e7kpISt+OOO7oHH3zQ/ed//ueAwTqam5vdGWec4UaPHu1KS0vdjjvu6G6//fZ+88yaNUsd5ENE+lWK3n///W633XZzZWVlbvTo0e573/tev64LH5/fuf+tcv5odWUmk3GXX365mzp1qkskEm7ixInu/PPPd8lkst+yZ555pqusrHQzZ850zz//vHPOufb2djdr1ixXWVnpDjroILdu3boB2x1UyawNVPDRP1YXlEK6PTnnXGtrq1u/fn3f33t7e91nPvMZd8ghh7ibbrrJdXZ2qst961vfcjNnznTHHHOMu/DCC928efPcZZdd5g499FC3du1ad/bZZ7vKykp33333uXnz5rnq6mq344479qtet8g/qqMHa9asWe6GG274xGO36U9paWnfskcccURf17POzk4nIq65uVltZ/ny5S4Wi5nb0d3d3e985/N59/nPf97tu+++7pprrul3nK31i8iA7jYdHR1u/vz57s0333SHHXaY++EPf6guf/LJJ7srrrjC/frXv3bnnXeee/jhh/t6AqxevdrtsssubtasWS6bzbqWlhY3adIkN3v27H7ruOeee/rutZaWFnfjjTe60aNHuxNOOKGvar6jo8MdccQRrqKiYsA9VltbG6qq+eOV5s5tvK8+Pt+dd97Zd69+9M+mam1sGUjCgEebuih99rOfdfvvv3+//sZr1qxx3/zmN/v127YUmoSbmprcunXrPvFPQ0ODc25j0tx5551de3u7c+5/k3BNTU2/vrCb/lRXVwcm4U/LSsK9vb1u0qRJrrS01FVXV5vHZlMS1txyyy3ugAMO6Pej6s0333TXXXddv/k+moQvv/xyt/3226ujneVyOXfzzTcP+FFYW1vrHnjgAbWL2sf/XHPNNWYS/mh3smOOOcbNmzfPPfPMM/1GyLrhhhtIwluYiHNGyR6Azaa9vb1fNzBsGbLZbKj/NZLP5wO/XAV8HEkYAABPqI4GAMATkjAAAJ6QhAEA8IQkDACAJyRhAAA8GXTtPSX3AAAM3mA6H/EmDACAJyRhAAA8IQkDAOAJSRgAAE9IwgAAeEISBgDAE5IwAACekIQBAPCEJAwAgCckYQAAPCEJAwDgyaDHjg5r+PRKe9qoen1j4jF9gUheDccCxrPOZfVlUsmMGl/210ZzXRZjayUq1nbp44jqW7pRzmwl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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "236a9ff8-83c8-4214-a807-8fcef610475e"
      },
      "source": [
        "# mobilenet_v2\n",
        "net = models.mobilenet_v2(pretrained=True)\n",
        "#print(net.named_modules)\n",
        "data = net.features[0][0].weight\n",
        "#print(data.size())\n",
        "out = torchvision.utils.make_grid(data)\n",
        "img_show(out, figsize=(10,10), title=\"mobilenet の最下位層の特徴検出器\")\n",
        "plt.show()"
      ],
      "id": "236a9ff8-83c8-4214-a807-8fcef610475e",
      "execution_count": null,
      "outputs": []
    }
  ]
}